@import "../../style/themes/default";
@import "../../style/mixins/index";

$tag-prefix-cls: #{$ant-prefix}-tag;

$tag-default-bg: $background-color-base;
$tag-default-color: $text-color;

.#{$tag-prefix-cls} {
  display: inline-block;
  line-height: 20px;
  height: 22px;
  padding: 0 8px;
  border-radius: $border-radius-base;
  border: $border-width-base $border-style-base $border-color-split;
  background: $tag-default-bg;
  font-size: $font-size-base;
  transition: all 0.3s $ease-in-out-circ;
  opacity: 1;
  margin-right: 8px;
  cursor: pointer;
  white-space: nowrap;

  &:hover {
    opacity: 0.85;
  }

  &,
  a,
  a:hover {
    color: $tag-default-color;
  }

  &-text {
    a:first-child:last-child {
      display: inline-block;
      margin: 0 -8px;
      padding: 0 8px;
    }
  }

  .#{$iconfont-css-prefix}-cross {
    @include iconfont-size-under-12px(10px);
    cursor: pointer;
    font-weight: bold;
    margin-left: 3px;
    transition: all 0.3s ease;
    opacity: 0.66;

    &:hover {
      opacity: 1;
    }
  }

  &-has-color {
    border-color: transparent;
    &,
    a,
    a:hover,
    .#{$iconfont-css-prefix}-cross,
    .#{$iconfont-css-prefix}-cross:hover {
      color: #fff;
    }
  }

  &-checkable {
    background-color: transparent;
    border-color: transparent;
    &:hover,
    &:active,
    &-checked {
      color: #fff;
    }
    &:hover {
      background-color: $primary-5;
    }
    &-checked {
      background-color: $primary-6;
    }
    &:active {
      background-color: $primary-7;
    }
  }

  &-close {
    width: 0 !important;
    padding: 0;
    margin: 0;
  }

  &-zoom-enter,
  &-zoom-appear {
    animation: antFadeIn .2s $ease-in-out-circ;
    animation-fill-mode: both;
  }

  &-zoom-leave {
    animation: antZoomOut .3s $ease-in-out-circ;
    animation-fill-mode: both;
  }

  $color-name-list: pink, red, orange, yellow, cyan, green, blue, purple;
  $color-arry-list: $pink-list, $red-list, $orange-list, $yellow-list, $cyan-list, $green-list, $blue-list, $purple-list;

  // mixin to iterate over colors and create CSS class for each one
  @mixin make-color-classes($i: length($color-name-list)) {
    @if $i > 0 {
        @include make-color-classes($i - 1);
        $color: nth($color-name-list, $i);
        $color-list: nth($color-arry-list, $i);
        $lightColor: nth($color-list, 2);
        $darkColor: nth($color-list, 6);

        &-#{$color} {
            color: $darkColor;
            background: $lightColor;
            border-color: $lightColor;
        }
        &-#{$color}-inverse {
            background: $darkColor;
            border-color: $darkColor;
            color: #fff;
        }
    }
  }

  @include make-color-classes();
}
